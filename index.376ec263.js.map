{"mappings":"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","sources":["index.js","demo.js","demo-grids-helper.js"],"sourcesContent":["function next(grid) {\n  const nextGrid = new Array(grid.length);\n  for (let i = 0; i < grid.length; i++) {\n    nextGrid[i] = new Array(grid[i].length);\n  }\n\n  for (let x = 0; x < grid.length; x++) {\n    for (let y = 0; y < grid[x].length; y++) {\n      let c = 0;\n      for (let dx = -1; dx <= 1; dx++) {\n        for (let dy = -1; dy <= 1; dy++) {\n          if (\n            !(dx === 0 && dy === 0) &&\n            typeof grid[x + dx] !== 'undefined' &&\n            typeof grid[x + dx][y + dy] !== 'undefined' &&\n            grid[x + dx][y + dy]\n          ) {\n            c++;\n          }\n        }\n      }\n\n      nextGrid[x][y] = grid[x][y] ? c === 2 || c === 3 : c === 3;\n    }\n  }\n\n  return nextGrid;\n}\n\nmodule.exports = { next };\n","const { next } = require('.');\nconst {\n  random,\n  create,\n  getPopulation,\n  encode,\n  decode,\n  dim,\n  pad,\n} = require('./demo-grids-helper');\n\nconst graphics = (() => {\n  let previousGrid;\n\n  function render(canvas, grid, cellWidth) {\n    const ctx = canvas.getContext('2d');\n\n    for (let i = 0; i < grid.length; i++) {\n      for (let j = 0; j < grid[i].length; j++) {\n        const cell = grid[i][j];\n\n        // Only re-draw if cell has changed\n        if (!previousGrid || cell !== previousGrid[i][j]) {\n          ctx.beginPath();\n          ctx.strokeStyle = '#555555';\n          ctx.fillStyle = cell ? '#ffffff' : '#000000';\n          ctx.lineWidth = 1;\n          ctx.rect(j * cellWidth, i * cellWidth, cellWidth, cellWidth);\n          ctx.fill();\n          ctx.stroke();\n        }\n      }\n    }\n\n    previousGrid = grid;\n  }\n\n  function resizeCanvasToDisplaySize(canvas) {\n    const width = canvas.clientWidth;\n    const height = canvas.clientHeight;\n\n    if (canvas.width !== width || canvas.height !== height) {\n      canvas.width = width;\n      canvas.height = height;\n      return true;\n    }\n\n    return false;\n  }\n\n  function requestAnimationFrame(cb, getInterval) {\n    let last;\n    function run(timestamp) {\n      if (last === undefined) last = timestamp;\n      const elapsed = timestamp - last;\n      if (elapsed > getInterval()) {\n        last = timestamp;\n        cb();\n      }\n      window.requestAnimationFrame(run);\n    }\n    window.requestAnimationFrame(run);\n  }\n\n  return { render, resizeCanvasToDisplaySize, requestAnimationFrame };\n})();\n\nconst game = (() => {\n  const generationsCountElement = document.getElementById('generations-count');\n  const populationCountElement = document.getElementById('population-count');\n  const startButtonElement = document.getElementById('start');\n  const clearButtonElement = document.getElementById('clear');\n  const resetButtonElement = document.getElementById('reset');\n  const randomButtonElement = document.getElementById('random');\n  const speedControlElement = document.getElementById('speed');\n  const speedValueElement = document.getElementById('speed-value');\n  const canvasElement = document.querySelector('canvas');\n\n  const hotkeys = {\n    P: onClickPlay,\n    C: onClickClear,\n    R: onClickRandom,\n    O: onClickReset,\n  };\n\n  let cellWidthInPixels,\n    _grid,\n    _initialGrid,\n    _isPlaying = false,\n    _numGens = 0,\n    w,\n    h,\n    speed,\n    isMouseBeingDragged = false,\n    dragValue, // value the cells dragged over should be\n    isPlayingBeforeDrag;\n\n  function updateGrid(gridFunc) {\n    const newGrid = gridFunc(_grid);\n    if (newGrid === undefined) {\n      return;\n    }\n\n    console.log(encode(newGrid));\n    _grid = newGrid;\n    graphics.render(canvasElement, _grid, cellWidthInPixels);\n    populationCountElement.textContent = String(getPopulation(_grid));\n  }\n\n  function init() {\n    startButtonElement.addEventListener('click', onClickPlay);\n    clearButtonElement.addEventListener('click', onClickClear);\n    resetButtonElement.addEventListener('click', onClickReset);\n    randomButtonElement.addEventListener('click', onClickRandom);\n    speedControlElement.addEventListener('change', onChangeSpeed);\n\n    document.addEventListener('keydown', onKeyDown);\n\n    canvasElement.addEventListener('mousedown', onMousedownCanvas);\n    canvasElement.addEventListener('mousemove', onMousemoveCanvas);\n    canvasElement.addEventListener('mouseup', onMouseupCanvas);\n\n    graphics.resizeCanvasToDisplaySize(canvasElement);\n\n    // Start game\n\n    initSpeed();\n    initButtons();\n\n    const { grid: initialGrid, cellWidthInPixels: cellWidth } =\n      getInitialGrid();\n    cellWidthInPixels = cellWidth;\n    _initialGrid = initialGrid;\n    h = initialGrid.length;\n    w = initialGrid[0].length;\n    updateGrid(() => initialGrid);\n    graphics.requestAnimationFrame(\n      () => {\n        if (_isPlaying) {\n          incrNumGens();\n          updateGrid((grid) => next(grid));\n        }\n      },\n      () => speed * 1000,\n    );\n  }\n\n  function getInitialGrid() {\n    const url = new URL(window.location.href);\n    const init = url.searchParams.get('init');\n    if (init) {\n      const decodedGrid = decode(init);\n      const decodedH = decodedGrid.length;\n      const decodedW = decodedGrid[0] ? decodedGrid[0].length : 0;\n      const cellWidthInPixels = getCellWidth(true, decodedW, decodedH);\n\n      const padW = Math.ceil(\n        (window.innerWidth - cellWidthInPixels * decodedW) / cellWidthInPixels,\n      );\n      const padH = Math.ceil(\n        (window.innerHeight - cellWidthInPixels * decodedH) / cellWidthInPixels,\n      );\n\n      return { grid: pad(decodedGrid, padW, padH), cellWidthInPixels };\n    } else {\n      const cellWidthInPixels = getCellWidth(false);\n      return {\n        grid: create(\n          Math.ceil(window.innerWidth / cellWidthInPixels),\n          Math.ceil(window.innerHeight / cellWidthInPixels),\n        ),\n        cellWidthInPixels,\n      };\n    }\n  }\n\n  function initButtons() {\n    const url = new URL(window.location.href);\n    if (url.searchParams.get('random') === 'false') {\n      randomButtonElement.style.display = 'none';\n    }\n    if (url.searchParams.get('clear') === 'false') {\n      clearButtonElement.style.display = 'none';\n    }\n    if (url.searchParams.get('reset') === 'true') {\n      resetButtonElement.style.display = 'block';\n    }\n  }\n\n  function getCellWidth(gridSetFromUrl, w, h) {\n    if (gridSetFromUrl) {\n      return Math.ceil(\n        Math.min(window.innerHeight / +h, window.innerWidth / +w),\n      );\n    }\n\n    const url = new URL(window.location.href);\n    const size = url.searchParams.get('size');\n    if (size === 'lg') {\n      return Math.max(\n        50,\n        Math.max(window.innerHeight / 50, window.innerWidth / 50),\n      );\n    }\n    return 20;\n  }\n\n  function initSpeed() {\n    const url = new URL(window.location.href);\n    const speed = +url.searchParams.get('speed') || 1;\n    updateSpeed(speed);\n  }\n\n  function onChangeSpeed(evt) {\n    const gensPerSec = Math.pow(evt.target.value, 2); // from 0.1->7.07 to 0.01->50\n    updateSpeed(gensPerSec);\n  }\n\n  function updateSpeed(gensPerSec) {\n    speed = 1 / gensPerSec;\n    speedValueElement.textContent = gensPerSec.toFixed(2);\n    speedControlElement.value = Math.pow(gensPerSec, 0.5);\n  }\n\n  function onKeyDown(evt) {\n    if (!evt.ctrlKey && !evt.metaKey) {\n      const func = hotkeys[evt.key.toUpperCase()];\n      func && func();\n    }\n  }\n\n  function onClickPlay() {\n    toggleIsPlaying();\n  }\n\n  function onClickReset() {\n    resetNumGens();\n    updateGrid(() => _initialGrid);\n  }\n\n  function onClickClear() {\n    setIsPlaying(false);\n    resetNumGens();\n    updateGrid(() => create(w, h));\n  }\n\n  function onClickRandom() {\n    resetNumGens();\n    updateGrid(() => random(w, h));\n  }\n\n  function incrNumGens() {\n    generationsCountElement.textContent = String(_numGens++);\n  }\n\n  function resetNumGens() {\n    _numGens = 0;\n    generationsCountElement.textContent = '0';\n  }\n\n  function toggleIsPlaying() {\n    setIsPlaying(!_isPlaying);\n  }\n\n  function setIsPlaying(isPlaying) {\n    _isPlaying = isPlaying;\n    startButtonElement.textContent = _isPlaying ? 'Pause (P)' : 'Play (P)';\n  }\n\n  function onMousedownCanvas(evt) {\n    // left-click\n    if (evt.buttons === 1) {\n      isMouseBeingDragged = true;\n      isPlayingBeforeDrag = _isPlaying;\n      setIsPlaying(false);\n\n      const { col, row } = getRowAndCol(evt);\n      dragValue = !_grid[row][col];\n      updateGrid((grid) => setCellValue(grid, row, col));\n    }\n  }\n\n  function onMousemoveCanvas(evt) {\n    if (isMouseBeingDragged) {\n      const { col, row } = getRowAndCol(evt);\n      updateGrid((grid) => setCellValue(grid, row, col));\n    }\n  }\n\n  function onMouseupCanvas(evt) {\n    if (isMouseBeingDragged) {\n      const { col, row } = getRowAndCol(evt);\n      updateGrid((grid) => setCellValue(grid, row, col));\n\n      isMouseBeingDragged = false;\n      isPlayingBeforeDrag && setIsPlaying(true);\n    }\n  }\n\n  function getRowAndCol(evt) {\n    return {\n      col: Math.floor(evt.clientX / cellWidthInPixels),\n      row: Math.floor(evt.clientY / cellWidthInPixels),\n    };\n  }\n\n  function setCellValue(grid, row, col) {\n    if (grid[row][col] === dragValue) {\n      return undefined;\n    }\n\n    const newGrid = grid.map((row) => [...row]);\n    newGrid[row][col] = dragValue;\n    return newGrid;\n  }\n\n  return { init };\n})();\n\ngame.init();\n","function create(w, h, valFunc = (i, j) => false) {\n  const grid = [];\n  for (let i = 0; i < h; i++) {\n    const r = [];\n    for (let j = 0; j < w; j++) {\n      r.push(valFunc(i, j));\n    }\n    grid.push(r);\n  }\n\n  return grid;\n}\n\nfunction random(w, h, fractionLive = 0.25) {\n  const b = 0.8;\n  return create(w, h, (i, j) => {\n    return (\n      // Cover only the middle b% of the grid\n      i / h > 1 - b &&\n      i / h < b &&\n      j / w > 1 - b &&\n      j / w < b &&\n      Math.random() < fractionLive\n    );\n  });\n}\n\nfunction getPopulation(grid) {\n  let c = 0;\n\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j]) {\n        c++;\n      }\n    }\n  }\n\n  return c;\n}\n\nconst rowSeparator = ',';\nconst columnSeparator = '-';\n\nfunction encode(grid) {\n  let s = '';\n  for (let i = 0; i < grid.length; i++) {\n    let r = '';\n\n    let curr;\n    let currCount = 0;\n    for (let j = 0; j < grid[i].length; j++) {\n      const c = grid[i][j];\n      if (curr !== c) {\n        if (curr !== undefined) {\n          r += currCount + (curr ? 'l' : 'd') + columnSeparator;\n        }\n        curr = c;\n        currCount = 0;\n      }\n\n      currCount++;\n\n      if (j === grid[i].length - 1) {\n        r += currCount++ + (curr ? 'l' : 'd') + columnSeparator;\n      }\n    }\n\n    s += r + rowSeparator;\n  }\n  return s;\n}\n\nfunction decode(str) {\n  const grid = [];\n\n  str.split(rowSeparator).forEach((row) => {\n    if (row) {\n      const cells = [];\n      row.split(columnSeparator).forEach((cell) => {\n        if (cell) {\n          const [, count, type] = cell.split(/([0-9]+)/);\n          for (let i = 0; i < count; i++) {\n            cells.push(type === 'l' ? true : false);\n          }\n        }\n      });\n      grid.push(cells);\n    }\n  });\n\n  return grid;\n}\n\nfunction trim(grid) {\n  return compose(\n    grid,\n\n    trimTop,\n    mirror,\n    trimTop,\n    mirror,\n\n    transpose,\n\n    trimTop,\n    mirror,\n    trimTop,\n    mirror,\n\n    transpose,\n  );\n}\n\nfunction trimTop(grid) {\n  let p = -2;\n\n  for (let i = 0; i < grid.length; i++) {\n    if (!empty(grid[i])) {\n      break;\n    }\n    p++;\n  }\n\n  return grid.filter((_, i) => i >= p);\n}\n\nfunction dim(str) {\n  const grid = decode(str);\n  return { rows: grid.length, cols: grid[0].length };\n}\n\nfunction pad(grid, w, h) {\n  return compose(\n    grid,\n\n    append(h / 2),\n    mirror,\n    append(h / 2),\n    mirror,\n\n    transpose,\n    append(w / 2),\n    mirror,\n    append(w / 2),\n    mirror,\n    transpose,\n  );\n}\n\nfunction append(l) {\n  return (grid) => {\n    for (let i = 0; i < l; i++) {\n      grid = [...grid, Array.from({ length: grid[0].length }, () => false)];\n    }\n    return grid;\n  };\n}\n\nfunction compose(v, ...p) {\n  p.forEach((f) => {\n    v = f(v);\n  });\n  return v;\n}\n\nfunction empty(cells) {\n  return !cells.some((cell) => cell);\n}\n\nfunction transpose(grid) {\n  return grid[0].map((_, colIndex) => grid.map((row) => row[colIndex]));\n}\n\nfunction mirror(grid) {\n  return grid.map((_, i) => grid[grid.length - 1 - i]);\n}\n\nfunction slice(grid, n) {\n  return grid.filter((_, i) => i < n);\n}\n\nfunction sliceBounds(grid, w, h) {\n  return compose(\n    grid,\n    (grid) => slice(grid, h),\n    transpose,\n    (grid) => slice(grid, w),\n    transpose,\n  );\n}\n\nmodule.exports = {\n  random,\n  create,\n  getPopulation,\n  encode,\n  decode,\n  dim,\n  pad,\n  trim,\n  sliceBounds,\n  compose,\n  mirror,\n  append,\n  transpose,\n};\n"],"names":["grid","nextGrid","Array","length","i","x","y","c","dx","dy","next","$b2513df9e241446d$var$create","w","h","valFunc","j","r","push","$b2513df9e241446d$var$decode","str","split","forEach","row","cells","cell","count","type","$b2513df9e241446d$var$trimTop","p","some","filter","_","$b2513df9e241446d$var$append","l","from","$b2513df9e241446d$var$compose","v","f","$b2513df9e241446d$var$transpose","map","colIndex","$b2513df9e241446d$var$mirror","$b2513df9e241446d$var$slice","n","$b2513df9e241446d$exports","fractionLive","b","Math","random","s","curr","currCount","undefined","rows","cols","create","getPopulation","encode","decode","pad","$cf63e07e1487c69a$var$graphics","previousGrid","canvas","cellWidth","ctx","getContext","beginPath","strokeStyle","fillStyle","lineWidth","rect","fill","stroke","width","clientWidth","height","clientHeight","cb","getInterval","last","window","requestAnimationFrame","run","timestamp","generationsCountElement","document","getElementById","populationCountElement","startButtonElement","clearButtonElement","resetButtonElement","randomButtonElement","speedControlElement","speedValueElement","canvasElement","querySelector","hotkeys","P","onClickPlay","C","onClickClear","R","onClickRandom","O","onClickReset","cellWidthInPixels","_grid","_initialGrid","speed","dragValue","isPlayingBeforeDrag","_isPlaying","_numGens","isMouseBeingDragged","updateGrid","gridFunc","newGrid","console","log","$cf63e07e1487c69a$require$encode","render","textContent","String","$cf63e07e1487c69a$require$getPopulation","getCellWidth","gridSetFromUrl","ceil","min","innerHeight","innerWidth","URL","location","href","searchParams","get","max","onChangeSpeed","evt","updateSpeed","pow","target","value","gensPerSec","toFixed","onKeyDown","ctrlKey","metaKey","func","key","toUpperCase","setIsPlaying","resetNumGens","$cf63e07e1487c69a$require$create","$cf63e07e1487c69a$require$random","isPlaying","onMousedownCanvas","buttons","col","getRowAndCol","setCellValue","onMousemoveCanvas","onMouseupCanvas","floor","clientX","clientY","addEventListener","resizeCanvasToDisplaySize","url","initSpeed","style","display","initButtons","initialGrid","init","decodedGrid","$cf63e07e1487c69a$require$decode","decodedH","decodedW","padW","padH","$cf63e07e1487c69a$require$pad","getInitialGrid","$cf63e07e1487c69a$require$next"],"version":3,"file":"index.376ec263.js.map"}