{"mappings":"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","sources":["index.js","demo.js"],"sourcesContent":["function next(grid) {\n  const nextGrid = new Array(grid.length);\n  for (let i = 0; i < grid.length; i++) {\n    nextGrid[i] = new Array(grid[i].length);\n  }\n\n  for (let x = 0; x < grid.length; x++) {\n    for (let y = 0; y < grid[x].length; y++) {\n      let c = 0;\n      for (let dx = -1; dx <= 1; dx++) {\n        for (let dy = -1; dy <= 1; dy++) {\n          if (\n            !(dx === 0 && dy === 0) &&\n            typeof grid[x + dx] !== 'undefined' &&\n            typeof grid[x + dx][y + dy] !== 'undefined' &&\n            grid[x + dx][y + dy]\n          ) {\n            c++;\n          }\n        }\n      }\n\n      nextGrid[x][y] = grid[x][y] ? c === 2 || c === 3 : c === 3;\n    }\n  }\n\n  return nextGrid;\n}\n\nmodule.exports = { next };\n","const { next } = require('.');\n\nconst graphics = (() => {\n  let previousGrid;\n\n  function render(canvas, grid, cellWidth) {\n    const ctx = canvas.getContext('2d');\n\n    for (let i = 0; i < grid.length; i++) {\n      for (let j = 0; j < grid[i].length; j++) {\n        const cell = grid[i][j];\n\n        // Only re-draw if cell has changed\n        if (!previousGrid || cell !== previousGrid[i][j]) {\n          ctx.beginPath();\n          ctx.strokeStyle = '#555555';\n          ctx.fillStyle = cell ? '#ffffff' : '#000000';\n          ctx.lineWidth = 1;\n          ctx.rect(j * cellWidth, i * cellWidth, cellWidth, cellWidth);\n          ctx.fill();\n          ctx.stroke();\n        }\n      }\n    }\n\n    previousGrid = grid;\n  }\n\n  function resizeCanvasToDisplaySize(canvas) {\n    const width = canvas.clientWidth;\n    const height = canvas.clientHeight;\n\n    if (canvas.width !== width || canvas.height !== height) {\n      canvas.width = width;\n      canvas.height = height;\n      return true;\n    }\n\n    return false;\n  }\n\n  function requestAnimationFrame(cb, getInterval) {\n    let last;\n    function run(timestamp) {\n      if (last === undefined) last = timestamp;\n      const elapsed = timestamp - last;\n      if (elapsed > getInterval()) {\n        last = timestamp;\n        cb();\n      }\n      window.requestAnimationFrame(run);\n    }\n    window.requestAnimationFrame(run);\n  }\n\n  return { render, resizeCanvasToDisplaySize, requestAnimationFrame };\n})();\n\nconst grids = (() => {\n  function create(w, h, valFunc = (i, j) => false) {\n    const grid = [];\n    for (let i = 0; i < h; i++) {\n      const r = [];\n      for (let j = 0; j < w; j++) {\n        r.push(valFunc(i, j));\n      }\n      grid.push(r);\n    }\n\n    return grid;\n  }\n\n  function random(w, h, fractionLive = 0.25) {\n    const b = 0.8;\n    return create(w, h, (i, j) => {\n      return (\n        // Cover only the middle b% of the grid\n        i / h > 1 - b &&\n        i / h < b &&\n        j / w > 1 - b &&\n        j / w < b &&\n        Math.random() < fractionLive\n      );\n    });\n  }\n\n  function getPopulation(grid) {\n    let c = 0;\n\n    for (let i = 0; i < grid.length; i++) {\n      for (let j = 0; j < grid[i].length; j++) {\n        if (grid[i][j]) {\n          c++;\n        }\n      }\n    }\n\n    return c;\n  }\n\n  return { random, create, getPopulation };\n})();\n\nconst game = (() => {\n  const generationsCountElement = document.getElementById('generations-count');\n  const populationCountElement = document.getElementById('population-count');\n  const startButtonElement = document.getElementById('start');\n  const clearButtonElement = document.getElementById('clear');\n  const randomButtonElement = document.getElementById('random');\n  const speedControlElement = document.getElementById('speed');\n  const speedValueElement = document.getElementById('speed-value');\n  const canvasElement = document.querySelector('canvas');\n\n  let cellWidthInPixels;\n\n  let _grid,\n    _isPlaying = false,\n    _numGens = 0,\n    w,\n    h,\n    speed;\n\n  function updateGrid(gridFunc) {\n    _grid = gridFunc(_grid);\n    graphics.render(canvasElement, _grid, cellWidthInPixels);\n    populationCountElement.textContent = String(grids.getPopulation(_grid));\n  }\n\n  function init() {\n    cellWidthInPixels = getCellWidth();\n    initSpeed();\n\n    w = Math.ceil(window.innerWidth / cellWidthInPixels);\n    h = Math.ceil(window.innerHeight / cellWidthInPixels);\n\n    startButtonElement.addEventListener('click', onClickPlay);\n    clearButtonElement.addEventListener('click', onClickClear);\n    randomButtonElement.addEventListener('click', onClickRandom);\n    speedControlElement.addEventListener('change', onChangeSpeed);\n\n    document.addEventListener('keydown', onKeyDown);\n\n    // Event listeners for dragging\n    {\n      let isMouseBeingDragged = false;\n      let dragValue; // value the cells dragged over should be\n      let isPlayingBeforeDrag;\n\n      canvasElement.addEventListener('mousedown', (evt) => {\n        isMouseBeingDragged = true;\n        isPlayingBeforeDrag = _isPlaying;\n        setIsPlaying(false);\n\n        const { col, row } = getRowAndCol(evt);\n        dragValue = !_grid[row][col];\n        updateGrid((grid) => setCellValue(grid, row, col));\n      });\n\n      canvasElement.addEventListener('mousemove', (evt) => {\n        if (isMouseBeingDragged) {\n          const { col, row } = getRowAndCol(evt);\n          updateGrid((grid) => setCellValue(grid, row, col));\n        }\n      });\n\n      canvasElement.addEventListener('mouseup', (evt) => {\n        if (isMouseBeingDragged) {\n          const { col, row } = getRowAndCol(evt);\n          updateGrid((grid) => setCellValue(grid, row, col));\n\n          isMouseBeingDragged = false;\n          isPlayingBeforeDrag && setIsPlaying(true);\n        }\n      });\n\n      function getRowAndCol(evt) {\n        return {\n          col: Math.floor(evt.clientX / cellWidthInPixels),\n          row: Math.floor(evt.clientY / cellWidthInPixels),\n        };\n      }\n\n      function setCellValue(grid, row, col) {\n        if (grid[row][col] === dragValue) {\n          return grid;\n        }\n\n        const newGrid = grid.map((row) => [...row]);\n        newGrid[row][col] = dragValue;\n        return newGrid;\n      }\n    }\n\n    graphics.resizeCanvasToDisplaySize(canvasElement);\n\n    // Start game\n    updateGrid(() => grids.create(w, h));\n    graphics.requestAnimationFrame(\n      () => {\n        if (_isPlaying) {\n          incrNumGens();\n          updateGrid((grid) => next(grid));\n        }\n      },\n      () => speed * 1000,\n    );\n  }\n\n  function getCellWidth() {\n    const url = new URL(window.location.href);\n    const size = url.searchParams.get('size');\n    switch (size) {\n      case 'lg':\n        return Math.max(\n          50,\n          Math.max(window.innerHeight / 50, window.innerWidth / 50),\n        );\n      default:\n        return 20;\n    }\n  }\n\n  function initSpeed() {\n    const url = new URL(window.location.href);\n    const speed = +url.searchParams.get('speed') || 1;\n    updateSpeed(speed);\n  }\n\n  function onChangeSpeed(evt) {\n    const gensPerSec = Math.pow(evt.target.value, 2); // from 0.1->7.07 to 0.01->50\n    updateSpeed(gensPerSec);\n  }\n\n  function updateSpeed(gensPerSec) {\n    speed = 1 / gensPerSec;\n    speedValueElement.textContent = gensPerSec.toFixed(2);\n    speedControlElement.value = Math.pow(gensPerSec, 0.5);\n  }\n\n  function onKeyDown(evt) {\n    if (!evt.ctrlKey && !evt.metaKey) {\n      switch (evt.key) {\n        case 'p':\n        case 'P':\n          onClickPlay();\n          break;\n        case 'c':\n        case 'C':\n          onClickClear();\n          break;\n        case 'r':\n        case 'R':\n          onClickRandom();\n          break;\n      }\n    }\n  }\n\n  function onClickPlay() {\n    toggleIsPlaying();\n  }\n\n  function onClickClear() {\n    setIsPlaying(false);\n    resetNumGens();\n    updateGrid(() => grids.create(w, h));\n  }\n\n  function onClickRandom() {\n    resetNumGens();\n    updateGrid(() => grids.random(w, h));\n  }\n\n  function incrNumGens() {\n    generationsCountElement.textContent = String(_numGens++);\n  }\n\n  function resetNumGens() {\n    _numGens = 0;\n    generationsCountElement.textContent = '0';\n  }\n\n  function toggleIsPlaying() {\n    setIsPlaying(!_isPlaying);\n  }\n\n  function setIsPlaying(isPlaying) {\n    _isPlaying = isPlaying;\n    startButtonElement.textContent = _isPlaying ? 'Pause (P)' : 'Play (P)';\n  }\n\n  return { init };\n})();\n\ngame.init();\n"],"names":["grid","nextGrid","Array","length","i","x","y","c","dx","dy","next","$795feab498779296$var$graphics","previousGrid","canvas","cellWidth","ctx","getContext","j","cell","beginPath","strokeStyle","fillStyle","lineWidth","rect","fill","stroke","width","clientWidth","height","clientHeight","cb","getInterval","last","window","requestAnimationFrame","run","timestamp","undefined","$795feab498779296$var$grids","create","w","h","valFunc","r","push","fractionLive","b","Math","random","generationsCountElement","document","getElementById","populationCountElement","startButtonElement","clearButtonElement","randomButtonElement","speedControlElement","speedValueElement","canvasElement","querySelector","cellWidthInPixels","_grid","speed","_isPlaying","_numGens","updateGrid","gridFunc","render","textContent","String","getPopulation","onChangeSpeed","evt","updateSpeed","pow","target","value","gensPerSec","toFixed","onKeyDown","ctrlKey","metaKey","key","onClickPlay","onClickClear","onClickRandom","setIsPlaying","resetNumGens","isPlaying","url","URL","location","href","searchParams","get","max","innerHeight","innerWidth","getCellWidth","initSpeed","ceil","addEventListener","dragValue","isPlayingBeforeDrag","isMouseBeingDragged","getRowAndCol","col","floor","clientX","row","clientY","setCellValue","newGrid","map","row1","resizeCanvasToDisplaySize","$795feab498779296$require$next","init"],"version":3,"file":"index.df0310b1.js.map"}